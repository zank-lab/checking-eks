AWSTemplateFormatVersion: '2010-09-09'
Description: The CICD resources for a specific microservice
Parameters:
  AppName:
    Description: The name of the app
    Type: String
  BuildSpecLocation:
    Description: The location of the buildspec file inside the repository
    Type: String
    Default: infra/codebuild/buildspec.yml
  CICDBranch:
    Description: The branch that will be used for the CICD process
    Type: String
    Default: master
Resources:
  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryDescription: !Sub 'The ${AppName} repository'
      RepositoryName: !Sub 'bookstore.${AppName}'
  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub 'bookstore.${AppName}'
  IamServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
  IamServiceRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/bookstore-${AppName}'
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/bookstore-${AppName}:*'
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
          - Effect: Allow
            Action: ecr:*
            Resource: '*'
          - Effect: Allow
            Resource:
              - !GetAtt 'CodePipelineS3BucketArtifacts.Arn'
              - !Join
                - /
                - - !GetAtt 'CodePipelineS3BucketArtifacts.Arn'
                  - '*'
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketAcl
              - s3:GetBucketLocation
          - Effect: Allow
            Resource:
              - !GetAtt 'CodeCommitRepository.Arn'
            Action:
              - codecommit:GitPull
          - Effect: Allow
            Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
            Resource:
              - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/bookstore-${AppName}-*'
      PolicyName: !Sub 'code-build-policy-${AppName}'
      Roles:
        - !Ref 'IamServiceRole'
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      BadgeEnabled: false
      Description: !Sub 'CodeBuild project for the App ${AppName}'
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables: 
          - Name: ECR_URL
            Value: !GetAtt EcrRepository.RepositoryUri
        PrivilegedMode: true
        ImagePullCredentialsType: CODEBUILD
      Name: !Sub 'bookstore-${AppName}'
      QueuedTimeoutInMinutes: 480
      ServiceRole: !Ref 'IamServiceRole'
      Source:
        Type: CODECOMMIT
        Location: !GetAtt 'CodeCommitRepository.CloneUrlHttp'
        BuildSpec: !Ref 'BuildSpecLocation'
      SourceVersion: !Sub 'refs/heads/${CICDBranch}'
      TimeoutInMinutes: 60
  IamPipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
  IamPipelineServiceRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - iam:PassRole
            Resource: '*'
            Effect: Allow
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - cloudformation.amazonaws.com
                  - elasticbeanstalk.amazonaws.com
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
          - Action:
              - codecommit:CancelUploadArchive
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:GetUploadArchiveStatus
              - codecommit:UploadArchive
            Resource: !GetAtt 'CodeCommitRepository.Arn'
            Effect: Allow
          - Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetApplication
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:RegisterApplicationRevision
            Resource: '*'
            Effect: Allow
          - Action:
              - elasticbeanstalk:*
              - ec2:*
              - elasticloadbalancing:*
              - autoscaling:*
              - cloudwatch:*
              - s3:*
              - sns:*
              - cloudformation:*
              - rds:*
              - sqs:*
              - ecs:*
            Resource: '*'
            Effect: Allow
          - Action:
              - lambda:InvokeFunction
              - lambda:ListFunctions
            Resource: '*'
            Effect: Allow
          - Action:
              - opsworks:CreateDeployment
              - opsworks:DescribeApps
              - opsworks:DescribeCommands
              - opsworks:DescribeDeployments
              - opsworks:DescribeInstances
              - opsworks:DescribeStacks
              - opsworks:UpdateApp
              - opsworks:UpdateStack
            Resource: '*'
            Effect: Allow
          - Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
            Resource: '*'
            Effect: Allow
          - Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
            Resource: '*'
            Effect: Allow
          - Effect: Allow
            Action:
              - devicefarm:ListProjects
              - devicefarm:ListDevicePools
              - devicefarm:GetRun
              - devicefarm:GetUpload
              - devicefarm:CreateUpload
              - devicefarm:ScheduleRun
            Resource: '*'
          - Effect: Allow
            Action:
              - servicecatalog:ListProvisioningArtifacts
              - servicecatalog:CreateProvisioningArtifact
              - servicecatalog:DescribeProvisioningArtifact
              - servicecatalog:DeleteProvisioningArtifact
              - servicecatalog:UpdateProduct
            Resource: '*'
          - Effect: Allow
            Action:
              - cloudformation:ValidateTemplate
            Resource: '*'
          - Effect: Allow
            Action:
              - ecr:DescribeImages
            Resource: '*'
          - Effect: Allow
            Action: s3:*
            Resource:
              - !GetAtt 'CodePipelineS3BucketArtifacts.Arn'
              - !Sub
                - ${BucketArn}/*
                - BucketArn: !GetAtt 'CodePipelineS3BucketArtifacts.Arn'
      PolicyName: !Sub 'code-build-policy-${AppName}'
      Roles:
        - !Ref 'IamPipelineServiceRole'
  CodePipelineS3BucketArtifacts:
    Type: AWS::S3::Bucket
  CodePipelineS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'CodePipelineS3BucketArtifacts'
      PolicyDocument:
        Version: '2012-10-17'
        Id: SSEAndSSLPolicy
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: s3:PutObject
            Resource: !Join
              - /
              - - !GetAtt 'CodePipelineS3BucketArtifacts.Arn'
                - '*'
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption: aws:kms
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource: !Join
              - /
              - - !GetAtt 'CodePipelineS3BucketArtifacts.Arn'
                - '*'
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  CloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !GetAtt 'CodeCommitRepository.Arn'
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !Ref 'CICDBranch'
      State: ENABLED
      Targets:
        - Arn: !Sub
            - arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipelineBuildName}
            - CodePipelineBuildName: !Ref 'CodePipelineBuild'
          Id: CodePipeline
          RoleArn: !GetAtt 'CloudWatchTargetRole.Arn'
  CloudWatchTargetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
  CloudWatchTargetPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - codepipeline:StartPipelineExecution
            Resource:
              - !Sub
                - arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipelineBuildName}
                - CodePipelineBuildName: !Ref 'CodePipelineBuild'
      PolicyName: !Sub 'cloud-watch-rule-code-pipeline-policy-${AppName}'
      Roles:
        - !Ref 'CloudWatchTargetRole'
  CodePipelineBuild:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt 'IamPipelineServiceRole.Arn'
      Name: !Sub 'build-pipeline-${AppName}'
      ArtifactStore:
        Type: S3
        Location: !Ref 'CodePipelineS3BucketArtifacts'
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: '1'
              RunOrder: 1
              Configuration:
                BranchName: !Ref 'CICDBranch'
                PollForSourceChanges: 'false'
                RepositoryName: !GetAtt 'CodeCommitRepository.Name'
              OutputArtifacts:
                - Name: SourceArtifact
              InputArtifacts: []
              Region: !Ref 'AWS::Region'
              Namespace: SourceVariables
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              RunOrder: 1
              Configuration:
                ProjectName: !Ref 'CodeBuildProject'
              OutputArtifacts:
                - Name: BuildArtifact
              InputArtifacts:
                - Name: SourceArtifact
              Region: !Ref 'AWS::Region'
              Namespace: BuildVariables
Outputs:
  CloneUrlHttp:
    Value: !GetAtt 'CodeCommitRepository.CloneUrlHttp'
